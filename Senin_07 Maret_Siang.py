"from abc import abstractmethod, ABC\n\n# OOP1 (Class : Hewan)\n# Abstraction\nclass abstract(ABC):\n    def fact(ini):\n        print(\"Ini adalah hewan\")\n        \n    #AbstractMethod\n    @abstractmethod\n    def harga_hewan(ini, x):\n        pass\n\n#Encapsulation\nclass Hewan(object):\n    def __init__(ini, nama, usia, jenis, mamalia):\n        ini.nama = nama\n        ini.usia = usia\n        ini.jenis = jenis\n        ini.mamalia = mamalia\n    \n    def tidur(ini, durasi):\n        for x in range(durasi):\n            print(\"ddrrr... ddrrr...\")\n        \n    def info_hewan(ini):\n        print(f\"nama: {ini.nama}, usia: {ini.usia}, jenis: {ini.jenis}, mamalia: {ini.mamalia}\")\n        \n#Inheritance\nclass Ayam(Hewan):\n    def __init__(ini, nama, usia, jenis, mamalia, warna, jenis_ayam, jenis_hewan):\n        super().__init__(nama, usia, jenis, mamalia)\n        ini.warna = warna\n        ini.jenis_ayam = jenis_ayam\n        ini.jenis_hewan = jenis_hewan\n    \n    def suara(ini):\n        super().tidur(2)\n        print(\"kukuruyuk...\")\n        \n    def harga_hewan(ini, x): # Abstract method\n        print(\"Harga ayam ini adalah Rp\", x)\n    \n    def info_ayam(ini):\n        super().info_hewan()\n        print(f\"warna: {ini.warna}, jenis ayam: {ini.jenis_ayam}, jenis hewan: {ini.jenis_hewan}\")\n\n# Polymorphism\nclass Burung(Hewan):\n    def __init__(ini, nama, usia, jenis, mamalia, warna):\n        super().__init__(nama, usia, jenis, mamalia)\n        ini.warna = warna\n        \n    def harga_hewan(ini, x): # abstract method\n        print(\"Harga burung ini adalah Rp\", x)\n    \n    def makan_jagung(ini, sendok_teh):\n        if sendok_teh >=3 :\n            print(\"Kenyang...\")\n        else:\n            print(\"Lapar...\")\n            \n    def info_burung(ini):\n        super().info_hewan()\n        print(\"warna: \", ini.warna)\n\n\n# OOP2 (Class : Barang)\n# Abstraction\nclass abstract2(ABC):\n    def desc(self):\n        print(\"Ini adalah barang\")\n        \n    #AbstractMethod\n    @abstractmethod\n    def harga_barang(self, x):\n        pass\n    \nclass barang_random(abstract2):\n    def __init__(self, nama, jenis):\n        self.nama = nama\n        self.jenis = jenis\n    def harga_barang(self, x):\n        print(\"Harga barang ini adalah Rp\", x)\n    def info_barang_rndm(self):\n        print(f\"nama barang: {self.nama}, jenis barang: {self.jenis}\")\n\n# Encapsulation\nclass Barang(object):\n    def __init__(self, nama, warna, jenis):\n        self.nama = nama\n        self.warna = warna\n        self.jenis = jenis\n    def info_barang(self):\n        print(f\"nama barang: {self.nama}, warna: {self.warna}, jenis: {self.jenis}\")\n\n# Inheritance\nclass TV(Barang):\n    def __init__(self, nama, warna, jenis, garansi, merk):\n        super().__init__(nama, warna, jenis)\n        self.garansi = garansi\n        self.merk = merk\n        \n    def harga_barang(self, x): # Abstract method\n        print(\"Harga TV ini adalah Rp\", x)\n        \n    def ukuran_tv(self, inch):\n        print(\"Ukuran TV:\", inch, \"Inch\")\n        \n    def info_tv(self):\n        super().info_barang()\n        print(f\"Mempunyai garansi: {self.garansi}, merk: {self.merk}\")\n\n# Polymorphism\nclass Lemari(Barang):\n    def __init__(self, nama, warna, jenis, garansi, merk, bahan):\n        super().__init__(nama, warna, jenis)\n        self.garansi = garansi\n        self.merk = merk\n        self.bahan = bahan\n        \n    def harga_barang(self, x): # Abstract method\n        print(\"Harga lemari ini adalah Rp\", x)\n        \n    def info_lemari(self):\n        super().info_barang()\n        print(f\"garansi: {self.garansi}, merk: {self.merk}, bahan: {self.bahan}\")\n\n# OOP3 (CLass : Kendaraan)\n# Abstraction\nclass abstract3(ABC):\n    def harga_kendaraan(self, x):\n        print(\"Harga: Rp\", x)\n        \n    #AbstractMethod\n    @abstractmethod\n    def bahan_bakar(self, x):\n        pass\n    \nclass kendaraan_random(abstract3):\n    def __init__(self, nama, jenis):\n        self.nama = nama\n        self.jenis = jenis\n    def bahan_bakar(self, x):\n        print(\"Bahan bakar kendaraan ini adalah\", x)\n    def info_kendaraan_rndm(self):\n        print(f\"nama barang: {self.nama}, jenis barang: {self.jenis}\")\n\n# Encapsulation\nclass Kendaraan(object):\n    def __init__(self, nama, warna, jenis):\n        self.nama = nama\n        self.warna = warna\n        self.jenis = jenis\n    def info_kendaraan(self):\n        print(f\"nama barang: {self.nama}, warna: {self.warna}, jenis: {self.jenis}\")\n\n# Inheritance\nclass Motor(Kendaraan):\n    def __init__(self, nama, warna, jenis, roda, merk):\n        super().__init__(nama, warna, jenis)\n        self.roda = roda\n        self.merk = merk\n        \n    def bahan_bakar(self, x):\n        print(\"Bahan bakar kendaraan ini adalah\", x)\n        \n    def cc_motor(self, cc):\n        print(\"Motor ini\", cc, \"CC\")\n        \n    def info_motor(self):\n        super().info_kendaraan()\n        print(f\"mempunyai roda: {self.roda}, merk: {self.merk}\")\n\n# Polymorphism\nclass Truk(Kendaraan):\n    def __init__(self, nama, warna, jenis, roda, merk, pajak):\n        super().__init__(nama, warna, jenis)\n        self.roda = roda\n        self.merk = merk\n        self.pajak = pajak\n        \n    def bahan_bakar(self, x): # Abstract method\n        print(\"Bahan bakar kendaraan ini adalah\", x)\n    \n    def muatan(self, x):\n        print(\"Truk ini bermuatan:\", x)\n        \n    def info_truk(self):\n        super().info_kendaraan()\n        print(f\"mempunyai roda: {self.roda}, merk: {self.merk}, pajak aktif: {self.pajak}\")"